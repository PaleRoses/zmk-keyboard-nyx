/*
 * Copyright (c) 2024 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Nyx Split Keyboard - Shared Devicetree Configuration
 * ====================================================
 * This file contains the shared configuration for both halves of the Nyx split keyboard.
 * It defines the keyboard matrix scanning configuration that is common to both halves.
 *
 * Hardware Configuration:
 * - Controller: nice!nano v2 (nRF52840)
 * - Matrix: 7 rows Ã— 12 columns (6 columns per half)
 * - Diode Direction: Row-to-Column (ROW2COL)
 * - Connection: Wireless BLE (left as central, right as peripheral)
 *
 * GPIO Pin Assignments:
 * - Rows (shared between both halves): P0.08, P0.17, P0.20, P0.22, P0.24, P1.00, P0.11
 * - Columns: Defined separately in left/right overlay files
 *
 * Important Notes:
 * - P0.04 is reserved for battery voltage monitoring on nice!nano v2
 * - This file should be included by both nyx_left.overlay and nyx_right.overlay
 * - Row pins require pull-down resistors for row2col diode orientation
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    /* Keyboard Matrix Scanner Configuration
     * =====================================
     * The kscan node defines how the keyboard matrix is electrically scanned.
     * For split keyboards, row pins are defined here (shared between halves),
     * while column pins are defined in the per-half overlay files.
     */
    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        
        /* Diode direction determines the scanning pattern and required pull resistors
         * row2col: Rows are outputs (driven), columns are inputs (read)
         * This requires pull-down resistors on rows when using active-high logic
         */
        diode-direction = "row2col";
        
        /* Row GPIO Configuration
         * ======================
         * These pins are shared between both keyboard halves.
         * The flag order is critical: GPIO_ACTIVE_HIGH must come first!
         * 
         * Pin mapping for nice!nano v2:
         * - gpio0: Pins P0.00 to P0.31
         * - gpio1: Pins P1.00 to P1.15 (P1.xx = P0.(32+xx) in nRF notation)
         */
        row-gpios = <&gpio0 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 0: P0.08 */
                    <&gpio0 17 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 1: P0.17 */
                    <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 2: P0.20 */
                    <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 3: P0.22 */
                    <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 4: P0.24 */
                    <&gpio1 0  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,  /* Row 5: P1.00 */
                    <&gpio0 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;  /* Row 6: P0.11 */
        
        /* Column pins will be defined in the overlay files for each half
         * Left half: columns 0-5
         * Right half: columns 6-11
         */
    };
    
    /* Matrix Transform Configuration
     * ==============================
     * This defines the logical key matrix layout and how physical switch positions
     * map to logical key positions in the keymap. The transform is essential for
     * split keyboards to correctly map keys from both halves into a unified layout.
     */
    default_transform: keymap_transform {
        compatible = "zmk,matrix-transform";
        
        /* Total logical matrix size */
        columns = <12>;  /* 6 physical columns per half */
        rows = <7>;      /* 7 physical rows */
        
        /* Physical to Logical Mapping
         * ===========================
         * RC(row,col) maps a physical matrix position to the logical keymap.
         * The split happens at column 6: columns 0-5 are left, 6-11 are right.
         * This creates a contiguous 84-key logical layout from two 42-key halves.
         *
         * Visual representation of the logical layout:
         * Left Half                    Right Half
         * C0  C1  C2  C3  C4  C5   |   C6  C7  C8  C9  C10 C11
         * R0: [ 0][ 1][ 2][ 3][ 4][ 5]   |   [ 6][ 7][ 8][ 9][10][11]
         * R1: [12][13][14][15][16][17]   |   [18][19][20][21][22][23]
         * R2: [24][25][26][27][28][29]   |   [30][31][32][33][34][35]
         * R3: [36][37][38][39][40][41]   |   [42][43][44][45][46][47]
         * R4: [48][49][50][51][52][53]   |   [54][55][56][57][58][59]
         * R5: [60][61][62][63][64][65]   |   [66][67][68][69][70][71]
         * R6: [72][73][74][75][76][77]   |   [78][79][80][81][82][83]
         */
        map = <
            /* Row 0 - Number row */
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)    RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
            /* Row 1 - Upper alpha */
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)    RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
            /* Row 2 - Home row */
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)    RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
            /* Row 3 - Lower alpha */
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)    RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
            /* Row 4 - Bottom row */
            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5)    RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
            /* Row 5 - Thumb cluster row 1 */
            RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)    RC(5,6) RC(5,7) RC(5,8) RC(5,9) RC(5,10) RC(5,11)
            /* Row 6 - Thumb cluster row 2 */
            RC(6,0) RC(6,1) RC(6,2) RC(6,3) RC(6,4) RC(6,5)    RC(6,6) RC(6,7) RC(6,8) RC(6,9) RC(6,10) RC(6,11)
        >;
    };
    
    /* Chosen Node Configuration
     * ========================
     * This tells ZMK which nodes to use for keyboard scanning and matrix transformation.
     * These are required for the keyboard to function properly.
     */
    chosen {
        zmk,kscan = &kscan0;                       /* Use kscan0 for matrix scanning */
        zmk,matrix-transform = &default_transform;  /* Use default_transform for mapping */
    };
};